# -*- coding: utf-8 -*-
"""Machine_Learning_Terapan.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aoHp51RrayzGfQaNlTA7RqXeIn-hxzCt

# Menginput seluruh library

Pada tahap ini, kita mengimpor berbagai library yang akan digunakan untuk analisis data, visualisasi, dan pemodelan machine learning.
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score

"""# Load Dataset

Membaca dataset AirQualityUCI.csv. Dataset ini berisi informasi tentang kualitas udara dari sensor di Italia, dengan lebih dari 900 sampel data.
"""

url = 'https://docs.google.com/spreadsheets/d/1ag1VUt7aWwmJ9enyUBaqR4ZtivUNcEQMemrasQ-IedU/export?format=csv'
df = pd.read_csv(url)
df.shape

"""# Data Understanding

Melihat 5 data pertama, tipe data, dan statistik deskriptif untuk memahami struktur dan karakteristik data.

Jumlah data awal adalah 9357 baris dan 15 kolom. Hal ini sesuai dengan hasil dari fungsi `.shape` pada dataframe sebelum dilakukan pembersihan.
"""

df.head()
df.info()
df.describe()

"""# Data Cleaning

Pada tahap ini dilakukan pembersihan data dengan:
- Menghapus dua kolom terakhir ('RH' dan 'AH') dari dataframe yang telah dimuat, karena kolom ini tidak relevan terhadap target prediksi dan tidak memiliki nilai yang informatif.
- Menghapus nilai-nilai yang tidak valid, seperti -200, yang merupakan indikator data hilang pada dataset ini.
"""

# Drop kolom yang tidak relevan (misalnya kolom terakhir kosong)
df = df.iloc[:, :-2]

# Ganti nilai -200 sebagai missing value
df.replace(-200, np.nan, inplace=True)

# Drop baris yang memiliki missing value
df.dropna(inplace=True)

df.shape

"""# Exploratory Data Analysis (EDA)

Grafik berikut menunjukkan korelasi antar fitur dalam dataset. Hal ini membantu dalam memilih variabel yang relevan untuk pemodelan.
"""

# Ambil hanya kolom numerik
numeric_df = df.select_dtypes(include=[np.number])

# Tampilkan heatmap korelasi
plt.figure(figsize=(10, 6))
sns.heatmap(numeric_df.corr(), annot=True, fmt=".2f", cmap="coolwarm")
plt.title("Korelasi antar Fitur")
plt.show()

"""# Feature and Target Separation

Memilih fitur dan target. Target prediksi adalah konsentrasi Benzene (C6H6(GT)), yang merupakan indikator kualitas udara.
"""

X = df[["CO(GT)", "PT08.S1(CO)", "PT08.S2(NMHC)", "PT08.S3(NOx)", "T"]]
y = df["C6H6(GT)"]

"""# Train-Test Split"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""# Feature Scalling

Melakukan normalisasi fitur agar model dapat belajar lebih optimal
"""

# Ganti koma dengan titik di seluruh dataframe
X_train = X_train.replace(',', '.', regex=True)
X_test = X_test.replace(',', '.', regex=True)
y_train = y_train.replace(',', '.', regex=True)
y_test = y_test.replace(',', '.', regex=True)

# Konversi semua kolom menjadi float
X_train = X_train.astype(float)
X_test = X_test.astype(float)
y_train = y_train.astype(float)
y_test = y_test.astype(float)


# Lakukan scaling
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

"""# Model Training

Melatif model Random Forest Regressor dengan data training

Random Forest Regressor bekerja dengan membangun banyak decision tree secara paralel pada subset data training. Setiap tree memberikan prediksi dan hasil akhirnya adalah rata-rata dari semua tree. Algoritma ini kuat terhadap overfitting dan mampu menangani data dengan fitur yang kompleks.

Parameter yang digunakan dalam model ini adalah:
- `n_estimators=100`: Jumlah pohon keputusan.
- `random_state=42`: Seed untuk menghasilkan hasil yang konsisten.
"""

model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train_scaled, y_train)

"""# Evaluasi Model

Mengevaluasi performa model menggunakan metrik Mean Squared Error dan R-squared. Nilai RÂ² mendekati 1 menunjukkan bahwa model memiliki performa prediksi yang baik.
"""

y_pred = model.predict(X_test_scaled)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"MSE: {mse}")
print(f"R2 Score: {r2}")

# Menampilkan feature importance
importances = model.feature_importances_
feature_names = X.columns

feature_importance_df = pd.DataFrame({
    'Fitur': feature_names,
    'Importance': importances
}).sort_values(by='Importance', ascending=False)

feature_importance_df

"""Berdasarkan hasil feature importance dari model Random Forest, kita dapat melihat fitur-fitur yang paling berkontribusi terhadap peningkatan kadar Benzene. Fitur dengan nilai 'importance' tertinggi adalah yang paling berpengaruh. Dari hasil ini, kita dapat menyimpulkan fitur lingkungan utama yang mempengaruhi kadar Benzene di udara."""